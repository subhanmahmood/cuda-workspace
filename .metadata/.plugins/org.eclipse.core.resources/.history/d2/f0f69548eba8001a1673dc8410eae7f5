#include <stdio.h>
#include <numeric>
#include <stdlib.h>
#include <cuda.h>
#include <math.h>
#include <fstream>

using namespace std;
#define BLOCK_SIZE 32

__global__ void reduceKernel(float *d_out, float *d_in);

string reduceInvoker(int arraySize, int blockSize){
    int N = arraySize;
	printf("%i\n", N);
	size_t size = N * sizeof(float);
	size_t size_o = size / blockSize;
	float h_in[N];
	float h_out[N / blockSize];
	float *d_in, *d_out;
	cudaEvent_t start, stop;
	cudaEventCreate(&start);
	cudaEventCreate(&stop);
	cudaError_t err;
	for (int i = 0; i < N; i++) {
		h_in[i] = 1.0f;
	}
	cudaMalloc((void**) &d_in, size);
	cudaMemcpy(d_in, h_in, size, cudaMemcpyHostToDevice);
	cudaMalloc((void**) &d_out, size_o);
	int grid_size = N / blockSize;
	printf("Grid Size is: %d\n", grid_size);
	printf("Block Size is: %d\n", blockSize);
	dim3 threadsPerBlock(blockSize);
	dim3 blocks(grid_size);
	cudaEventRecord(start);
	reduceKernel<<<blocks, threadsPerBlock, blockSize>>>(d_out, d_in);
	cudaDeviceSynchronize();
	reduceKernel<<<1, threadsPerBlock, blockSize>>>(d_out, d_out);
	// Wait for GPU to finish before accessing on host
	err = cudaDeviceSynchronize();
	// err = cudaThreadSynchronize();
	cudaEventRecord(stop);
	printf("Run kernel: %s\n", cudaGetErrorString(err));
	printf("\n");
	err = cudaMemcpy(h_out, d_out, size_o, cudaMemcpyDeviceToHost);
	printf("Copy h_out off device: %s\n", cudaGetErrorString(err));
	printf("\n");
	printf("And the final reduction is: %f\n", h_out[0]);
	cudaFree(d_in);
	cudaFree(d_out);
	return "";
}

int main(void) {
	int blocksize = 32;
    for (int i = 5; i <= 20; i++){
        if(i > 10 && !(i % 2 == 0)){
            blocksize *= 2;
        }
        int size = 1 << i;
        reduceInvoker(sizem blocksize);
        printf("i:%i, arraysize: %i, blocksize:%i\n", i, size, blocksize);
    }
}
__global__ void reduceKernel(float* d_out, float* d_in) {
	int myId = threadIdx.x + blockDim.x * blockIdx.x; // ID relative
	int tid = threadIdx.x; // Local ID
	extern __shared__ float temp[];
	temp[tid] = d_in[myId];
	__syncthreads();
	// do reduction in shared memory
	for (unsigned int s = blockDim.x / 2; s >= 1; s >>= 1) {
		if (tid < s) {
			temp[tid] += temp[tid + s];
		}
		__syncthreads(); // make sure all adds at one stage are
	}
	// only thread 0 writes result for this block back to global memory
	if (tid == 0) {
		d_out[blockIdx.x] = temp[tid];
	}
}
